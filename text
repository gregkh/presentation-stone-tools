Patches carved into stone tablets
- why do kernel developers rely on email



Why are we so old-school?

	7-8 changes an hour / 24 hours a day

	I accept only 1/3 the patches submitted


75 kernel maintainers accepted 364 or more patches last year
13 accepted over 1000 patches last year

	"It's a poor craftsman that blames his tools" does not mean, as so many
	programmers seem to believe, that tools don't matter at all, only
	skills do, so if someone failed it can't possibly be their tools, only
	their skill.

	It means that part of being an expert craftsman is having the
	experience and skills to select excellent tools, and the experience and
	skills to drive those excellent tools to produce excellent results.
	Blaming your tools means either that you lack skill, or that you chose
	your tools poorly because you lack the experience and skills to choose
	correctly. Sitting there and defending bad tools does not impress me;
	it makes you sound like a craftsman who can not tell the difference
	between good tools and bad tools... and that's a bad craftsman.

	Yes. Tools matter. Good tools won't bring you to your optimum peak
	performance on your own, but bad tools will guarantee you'll never get
	there. Bad tools typically take longer to work with, and typically
	teach bad habits to get around their deficiencies.

	Da Vinci with a mop and a bucket of mud may be a better painter than
	you, but he would never beat Da Vinci with quality tools.

		https://news.ycombinator.com/item?id=2380679
		Jeremy Bowers http://www.jerf.org/iri/

Github/bitbucket/gitlab/etc
	cons:
		difficult to do whitespace checking
		pull request discussion disjoint from mailing list
		ability to locally test limited
		constant merge commits
		requires online access
		delay between patches
		does not scale
	pros:
		drive-by patches
		backend testing framework integration
		getting better

Gerrit
	cons:
		patch submission difficult
		patch series requires topic branches
		can not see full patch at once
			one click per file!
		delay in seeing individual patches
		local testing difficult
		impossible to set up / admin
	pros:
		can sometimes be scripted
		everyone knows how to use it
		PMs like it

email
	cons:
		PMs don't understand it
			(solution, patchwork)
		people don't use good email clients
			Documentation/email_clients.txt
	pros:
		everyone in the world has it
		online access not required
		non-native language supported
		fast patch review
		local testing easy
		everyone can review
			trains others on your team




email clients
	good ones
		claws
		evolution
		kmail
		mutt
		pine/alpine
		sylpheed
		thunderbird
		tkrat

	bad ones
		groupwise
		lotus notes
		outlook/exchange
		gmail web interface
		almost any other web email client


43 different developers
	- some drive-by from github
	- rest email patches
	- 2357 patches in 2 years  3-4 patches accepted every day.
	- everything had at least one other reviewer


Why email matters

The goal of any good manager is to help increase the skill level of
their developers.  To do this, you need to provide ways for them to
learn how to get better, what to and not to do.

You can try to do this directly, by having senior developers critique
their contributions, but that usually wastes senior developer's time for
common issues and problems.

But, if the developer can see others get critiqued, and learn from past
issues and problems as to how to solve the issue, they have the
opportunity to learn faster, and with less involvement directly from the
senior developers.

By doing code review on a web site, it's up to the maintainers of the
code to always do the review.  If your code is not being reviewed, you
do not seek out and read reviews from others.

But, if the review is on a mailing list, where everyone is, then
everyone can always see the review.  Everyone learns from everyone else.
It also allows everyone to help contribute to reviews.  For by reading
and reviewing other people's code, you get better on your own.

Also having an easy-to-search history of all code review is invaluable.
For the linux kernel, there are tools to take any git commit, and track
it back to the public posting of the patch, and see the discussion of
that patch.  To try to work backwards from a git commit to a gerrit
discussion is hard, if not almost impossible.

When reviews happen on a web tool, they are separate from the discussion
about larger issues, like design, how things interact with other parts
of the system, and the like.  Yet these types of discussions need to be
had with everyone on the team, or at least a subset, so to do that in a
place separate from where the development team is all watching, makes
things disjointed and harder to understand and follow for everyone
involved.




