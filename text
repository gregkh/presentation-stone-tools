Patches carved into stone tablets
- why do kernel developers rely on email



Why are we so old-school?

	7-8 changes an hour / 24 hours a day

	I accept only 1/3 the patches submitted


75 kernel maintainers accepted 364 or more patches last year
13 accepted over 1000 patches last year

	"It's a poor craftsman that blames his tools" does not mean, as so many
	programmers seem to believe, that tools don't matter at all, only
	skills do, so if someone failed it can't possibly be their tools, only
	their skill.

	It means that part of being an expert craftsman is having the
	experience and skills to select excellent tools, and the experience and
	skills to drive those excellent tools to produce excellent results.
	Blaming your tools means either that you lack skill, or that you chose
	your tools poorly because you lack the experience and skills to choose
	correctly. Sitting there and defending bad tools does not impress me;
	it makes you sound like a craftsman who can not tell the difference
	between good tools and bad tools... and that's a bad craftsman.

	Yes. Tools matter. Good tools won't bring you to your optimum peak
	performance on your own, but bad tools will guarantee you'll never get
	there. Bad tools typically take longer to work with, and typically
	teach bad habits to get around their deficiencies.

	Da Vinci with a mop and a bucket of mud may be a better painter than
	you, but he would never beat Da Vinci with quality tools.

		https://news.ycombinator.com/item?id=2380679
		Jeremy Bowers http://www.jerf.org/iri/

Github/bitbucket/gitlab/etc
	cons:
		difficult to do whitespace checking
		pull request discussion disjoint from mailing list
		ability to locally test limited
		constant merge commits
		requires online access
		delay between patches
		does not scale
	pros:
		drive-by patches
		backend testing framework integration
		getting better

Gerrit
	cons:
		patch submission difficult
		patch series requires topic branches
		can not see full patch at once
			one click per file!
		delay in seeing individual patches
		local testing difficult
		impossible to set up / admin
	pros:
		can sometimes be scripted
		everyone knows how to use it
		PMs like it

email
	cons:
		PMs don't understand it
			(solution, patchwork)
		people don't use good email clients
			Documentation/email_clients.txt
	pros:
		everyone in the world has it
		online access not required
		non-native language supported
		fast patch review
		local testing easy
		everyone can review
			trains others on your team




email clients
	good ones
		claws
		evolution
		kmail
		mutt
		pine/alpine
		sylpheed
		thunderbird
		tkrat

	bad ones
		groupwise
		lotus notes
		outlook/exchange
		gmail web interface
		almost any other web email client

